from clickhouse_backend import models


class FinsefluxPostproc(models.ClickhouseModel):

    time = models.DateTimeField(primary_key=True)
    u_mean = models.Float64Field('streamwise velocity [m/s]')
    v_mean = models.Float64Field('crosswise velocity [m/s]')
    w_mean = models.Float64Field('vertical velocity [m/s]')
    Ts_mean = models.Float64Field('sonic temperature [K]')
    T_mean = models.Float64Field('temperature (corrected) [K]')
    h2o_mean = models.Float64Field('H2O density [kg/m^3]')
    co2_mean = models.Float64Field('CO2 density [kg/m^3]')
    u_sd = models.Float64Field('streamwise velocity fluctuation [m/s]')
    v_sd = models.Float64Field('crosswise velocity fluctuation [m/s]')
    w_sd = models.Float64Field('vertical velocity fluctuation [m/s]')
    Ts_sd = models.Float64Field('temperature fluctuation [K]')
    h2o_sd = models.Float64Field('H2O density fluctuation [kg/m^3]')
    co2_sd = models.Float64Field('CO2 density fluctuation [kg/m^3]')
    cov_uw = models.Float64Field('covariance(u,w) [m^2/s^2]')
    cov_vw = models.Float64Field('covariance(v,w) [m^2/s^2]')
    cov_uv = models.Float64Field('covariance(u,v) [m^2/s^2]')
    wd_mean = models.Float64Field('mean wind direction [degree]')
    ws_mean = models.Float64Field('mean wind speed [m/s]')
    ustar = models.Float64Field('friction velocity [m/s]')
    tke = models.Float64Field('turbulent kinetic energy [m^2/s^2]')
    dshear = models.Float64Field('directional shear [degree]')
    z0 = models.Float64Field('roughness length (calculated from ustar) [m]')
    SH = models.Float64Field('sensible heat flux [W/m^2]')
    LH = models.Float64Field('latent heat flux [W/m^2]')
    ET = models.Float64Field('evaporation [kg/(s*m^2])')
    BR = models.Float64Field('Bowen ratio')
    CF = models.Float64Field('CO2 flux [kg/(s*m^2])')
    L = models.Float64Field('Obukhov length [m]')
    zeta = models.Float64Field('stability parameter')
    xb = models.Float64Field('xb (anisotropy triangle)')
    yb = models.Float64Field('yb (anisotropy triangle)')
    flux_intermittency = models.Float64Field('flux intermittency factor')
    dr_rot1 = models.Int32Field('angle of 1. rotation in DR (for qc) [degree]')
    dr_rot2 = models.Int32Field('angle of 2. rotation in DR (for qc) [degree]')
    nr_spikes_u = models.Int32Field('number of spikes u')
    nr_spikes_v = models.Int32Field('number of spikes v')
    nr_spikes_w = models.Int32Field('number of spikes w')
    nr_spikes_Ts = models.Int32Field('number of spikes Ts')
    nr_spikes_h2o = models.Int32Field('number of spikes H2O')
    nr_spikes_co2 = models.Int32Field('number of spikes CO2')
    ampl_res_u = models.Int32Field('amplitude resolution u')
    ampl_res_v = models.Int32Field('amplitude resolution v')
    ampl_res_w = models.Int32Field('amplitude resolution w')
    ampl_res_Ts = models.Int32Field('amplitude resolution Ts')
    ampl_res_h2o = models.Int32Field('amplitude resolution H2O')
    ampl_res_co2 = models.Int32Field('amplitude resolution CO2')
    qf_most = models.Int32Field('quality flag MOST')
    qf_stationarity = models.Int32Field('quality flag stationarity')
    qf_w = models.Int32Field('quality flag w')
    qf_all = models.Int32Field('quality flag (all)')
