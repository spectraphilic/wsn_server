# Generated by Django 4.2.10 on 2025-09-04 14:58

import clickhouse_backend.models
from django.db import migrations
import django.db.models.manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='FinsefluxBiomet',
            fields=[
                ('timestamp', clickhouse_backend.models.UInt32Field(db_column='TIMESTAMP', primary_key=True, serialize=False)),
                ('wd_20_35_1_1_1', clickhouse_backend.models.Float64Field(db_column='WD_20_35_1_1_1')),
                ('fc1wsmax_16_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1WSmax_16_99_1_1_1')),
                ('fc2driftsum_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2DRIFTsum_99_99_1_1_1')),
                ('fc2driftmean_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2DRIFTmean_99_99_1_1_1')),
                ('cs650vratio_99_99_3_1_1', clickhouse_backend.models.Float64Field(db_column='CS650VRATIO_99_99_3_1_1')),
                ('fc1wsmin_16_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1WSmin_16_99_1_1_1')),
                ('lwin_6_14_1_1_1', clickhouse_backend.models.Float64Field(db_column='LWIN_6_14_1_1_1')),
                ('fc1driftmax_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1DRIFTmax_99_99_1_1_1')),
                ('swin_6_10_1_1_1', clickhouse_backend.models.Float64Field(db_column='SWIN_6_10_1_1_1')),
                ('shf_6_37_2_1_1', clickhouse_backend.models.Float64Field(db_column='SHF_6_37_2_1_1')),
                ('ta_2_1_1_2_1', clickhouse_backend.models.Float64Field(db_column='TA_2_1_1_2_1')),
                ('metnora_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='METNORA_99_99_1_1_1')),
                ('shf_99_37_2_1_1', clickhouse_backend.models.Float64Field(db_column='SHF_99_37_2_1_1')),
                ('metnorr_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='METNORR_99_99_1_1_1')),
                ('ts_2_38_2_1_1', clickhouse_backend.models.Float64Field(db_column='TS_2_38_2_1_1')),
                ('bec_99_99_3_1_1', clickhouse_backend.models.Float64Field(db_column='BEC_99_99_3_1_1')),
                ('vin_18_39_1_1_1', clickhouse_backend.models.Float64Field(db_column='VIN_18_39_1_1_1')),
                ('shf_99_37_1_1_1', clickhouse_backend.models.Float64Field(db_column='SHF_99_37_1_1_1')),
                ('swout_6_11_1_1_1', clickhouse_backend.models.Float64Field(db_column='SWOUT_6_11_1_1_1')),
                ('fc1driftmin_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1DRIFTmin_99_99_1_1_1')),
                ('tss_2_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='TSS_2_99_1_1_1')),
                ('fc1driftmean_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1DRIFTmean_99_99_1_1_1')),
                ('ts_2_38_3_1_1', clickhouse_backend.models.Float64Field(db_column='TS_2_38_3_1_1')),
                ('record', clickhouse_backend.models.UInt32Field(db_column='RECORD')),
                ('ts_2_38_1_1_1', clickhouse_backend.models.Float64Field(db_column='TS_2_38_1_1_1')),
                ('fc2driftmin_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2DRIFTmin_99_99_1_1_1')),
                ('ta_2_1_1_1_1', clickhouse_backend.models.Float64Field(db_column='TA_2_1_1_1_1')),
                ('rh_19_3_1_2_1', clickhouse_backend.models.Float64Field(db_column='RH_19_3_1_2_1')),
                ('fc2driftmax_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2DRIFTmax_99_99_1_1_1')),
                ('metnor_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='METNOR_99_99_1_1_1')),
                ('lwout_6_15_1_1_1', clickhouse_backend.models.Float64Field(db_column='LWOUT_6_15_1_1_1')),
                ('fc1driftstd_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1DRIFTstd_99_99_1_1_1')),
                ('rh_19_3_1_1_1', clickhouse_backend.models.Float64Field(db_column='RH_19_3_1_1_1')),
                ('fc1driftsum_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1DRIFTsum_99_99_1_1_1')),
                ('fc1wsmean_16_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1WSmean_16_99_1_1_1')),
                ('fc2wsmin_16_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2WSmin_16_99_1_1_1')),
                ('fc2wsmax_16_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2WSmax_16_99_1_1_1')),
                ('shf_6_37_1_1_1', clickhouse_backend.models.Float64Field(db_column='SHF_6_37_1_1_1')),
                ('fc2driftstd_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2DRIFTstd_99_99_1_1_1')),
                ('ws_16_33_1_1_1', clickhouse_backend.models.Float64Field(db_column='WS_16_33_1_1_1')),
                ('fc2wsmean_16_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2WSmean_16_99_1_1_1')),
                ('pa_4_2_1_1_1', clickhouse_backend.models.Float64Field(db_column='PA_4_2_1_1_1')),
                ('swc_12_36_3_1_1', clickhouse_backend.models.Float64Field(db_column='SWC_12_36_3_1_1')),
                ('cs650period_99_99_3_1_1', clickhouse_backend.models.Float64Field(db_column='CS650PERIOD_99_99_3_1_1')),
                ('permittivity_99_99_3_1_1', clickhouse_backend.models.Float64Field(db_column='PERMITTIVITY_99_99_3_1_1')),
                ('metnos_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='METNOS_99_99_1_1_1')),
                ('shf_99_37_2_1_2', clickhouse_backend.models.Float64Field(db_column='SHF_99_37_2_1_2')),
                ('shf_99_37_1_1_2', clickhouse_backend.models.Float64Field(db_column='SHF_99_37_1_1_2')),
                ('tot_precip_part', clickhouse_backend.models.Float64Field()),
                ('dc9', clickhouse_backend.models.Float64Field()),
                ('drizzle_part', clickhouse_backend.models.Float64Field()),
                ('dc8', clickhouse_backend.models.Float64Field()),
                ('dc2', clickhouse_backend.models.Float64Field()),
                ('dc7', clickhouse_backend.models.Float64Field()),
                ('precip_type_d', clickhouse_backend.models.Float64Field(db_column='precip_type_D')),
                ('dc5', clickhouse_backend.models.Float64Field()),
                ('dc1', clickhouse_backend.models.Float64Field()),
                ('precip_abs_d', clickhouse_backend.models.Float64Field(db_column='precip_abs_D')),
                ('dc11', clickhouse_backend.models.Float64Field()),
                ('precip_int_h_d', clickhouse_backend.models.Float64Field(db_column='precip_int_h_D')),
                ('dc3', clickhouse_backend.models.Float64Field()),
                ('tot_drops', clickhouse_backend.models.Float64Field()),
                ('dc6', clickhouse_backend.models.Float64Field()),
                ('precip_diff_d', clickhouse_backend.models.Float64Field(db_column='precip_diff_D')),
                ('dc10', clickhouse_backend.models.Float64Field()),
                ('dc0', clickhouse_backend.models.Float64Field()),
                ('snow_part', clickhouse_backend.models.Float64Field()),
                ('dc4', clickhouse_backend.models.Float64Field()),
                ('precip_int_min_d', clickhouse_backend.models.Float64Field(db_column='precip_int_min_D')),
                ('hail_part', clickhouse_backend.models.Float64Field()),
                ('metnorr_010_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='METNORR_010_99_99_1_1_1')),
                ('metnoma_01_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='METNOmA_01_99_99_1_1_1')),
                ('pa_4_2_2_1_1', clickhouse_backend.models.Float64Field(db_column='PA_4_2_2_1_1')),
                ('metnorr_011_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='METNORR_011_99_99_1_1_1')),
            ],
            options={
                'db_table': 'finseflux_Biomet',
                'managed': False,
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('_overwrite_base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='FinsefluxHfdata',
            fields=[
                ('timestamp', clickhouse_backend.models.DateTime64Field(db_column='TIMESTAMP', precision=3, primary_key=True, serialize=False)),
                ('co2', clickhouse_backend.models.Float64Field(db_column='CO2')),
                ('t_in', clickhouse_backend.models.Float64Field(db_column='T_in')),
                ('ux', clickhouse_backend.models.Float64Field(db_column='Ux')),
                ('uy', clickhouse_backend.models.Float64Field(db_column='Uy')),
                ('uz', clickhouse_backend.models.Float64Field(db_column='Uz')),
                ('h2o', clickhouse_backend.models.Float64Field(db_column='H2O')),
                ('ptotal', clickhouse_backend.models.Float64Field(db_column='Ptotal')),
                ('sos_ana', clickhouse_backend.models.Float64Field(db_column='SOS_ana')),
                ('sonic_diag', clickhouse_backend.models.Float64Field()),
                ('w_ana', clickhouse_backend.models.Float64Field(db_column='W_ana')),
                ('u_ana', clickhouse_backend.models.Float64Field(db_column='U_ana')),
                ('record', clickhouse_backend.models.UInt32Field(db_column='RECORD')),
                ('v_ana', clickhouse_backend.models.Float64Field(db_column='V_ana')),
                ('t_out', clickhouse_backend.models.Float64Field(db_column='T_out')),
                ('co2_dry', clickhouse_backend.models.Float64Field(db_column='CO2_dry')),
                ('sos', clickhouse_backend.models.Float64Field(db_column='SOS')),
                ('h2o_dry', clickhouse_backend.models.Float64Field(db_column='H2O_dry')),
                ('agc', clickhouse_backend.models.Float64Field(db_column='AGC')),
            ],
            options={
                'db_table': 'finseflux_HFData',
                'managed': False,
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('_overwrite_base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='FinsefluxStationstatus',
            fields=[
                ('timestamp', clickhouse_backend.models.UInt32Field(db_column='TIMESTAMP', primary_key=True, serialize=False)),
                ('pulse_cnr4_tot', clickhouse_backend.models.Float64Field(db_column='pulse_CNR4_Tot')),
                ('record', clickhouse_backend.models.UInt32Field(db_column='RECORD')),
                ('t_nr', clickhouse_backend.models.Float64Field(db_column='T_nr')),
                ('shf_cal_on_f', clickhouse_backend.models.Float64Field()),
                ('buff_depth', clickhouse_backend.models.Float64Field()),
                ('panel_tmpr', clickhouse_backend.models.Float64Field()),
                ('shf_cal_1_field', clickhouse_backend.models.Float64Field(db_column='shf_cal(1)')),
                ('rl_down_meas', clickhouse_backend.models.Float64Field(db_column='Rl_down_meas')),
                ('sw12_1_state', clickhouse_backend.models.Float64Field()),
                ('ftpresult_biomet', clickhouse_backend.models.Float64Field(db_column='FTPResult_Biomet')),
                ('t_k_nr', clickhouse_backend.models.Float64Field(db_column='T_K_nr')),
                ('shf_cal_2_field', clickhouse_backend.models.Float64Field(db_column='shf_cal(2)')),
                ('rl_up_meas', clickhouse_backend.models.Float64Field(db_column='Rl_up_meas')),
                ('batt_cr6', clickhouse_backend.models.Float64Field(db_column='batt_CR6')),
                ('process_time', clickhouse_backend.models.Float64Field()),
                ('ftpresult_stationstatus', clickhouse_backend.models.Float64Field(db_column='FTPResult_StationStatus')),
                ('a116_panel_tmpr', clickhouse_backend.models.Float64Field(db_column='A116_panel_tmpr')),
                ('a116_panel_tmpr4', clickhouse_backend.models.Float64Field(db_column='A116_panel_tmpr4')),
                ('a116_panel_tmpr1', clickhouse_backend.models.Float64Field(db_column='A116_panel_tmpr1')),
                ('a116_panel_tmpr3', clickhouse_backend.models.Float64Field(db_column='A116_panel_tmpr3')),
                ('a116_panel_tmpr2', clickhouse_backend.models.Float64Field(db_column='A116_panel_tmpr2')),
                ('skipped_scans', clickhouse_backend.models.Float64Field()),
                ('crdresult_stationstatus', clickhouse_backend.models.Float64Field(db_column='CRDResult_StationStatus')),
                ('crdresult_biomet', clickhouse_backend.models.Float64Field(db_column='CRDResult_BIOMET')),
                ('a116_panel_tmpr_1_field', clickhouse_backend.models.Float64Field(db_column='A116_panel_tmpr(1)')),
                ('a116_panel_tmpr_2_field', clickhouse_backend.models.Float64Field(db_column='A116_panel_tmpr(2)')),
                ('a116_panel_tmpr_4_field', clickhouse_backend.models.Float64Field(db_column='A116_panel_tmpr(4)')),
                ('timeoffset', clickhouse_backend.models.Float64Field(db_column='TimeOffset')),
                ('a116_panel_tmpr_3_field', clickhouse_backend.models.Float64Field(db_column='A116_panel_tmpr(3)')),
                ('crdresult_hfdata', clickhouse_backend.models.Float64Field(db_column='CRDResult_HFData')),
                ('ftpresult_hfdata', clickhouse_backend.models.Float64Field(db_column='FTPResult_HFData')),
                ('buffdepth', clickhouse_backend.models.Float64Field(db_column='BuffDepth')),
                ('slowproctime2', clickhouse_backend.models.Float64Field(db_column='SlowProcTime2')),
                ('skippedslowscan2', clickhouse_backend.models.Float64Field(db_column='SkippedSlowScan2')),
                ('skippedscan', clickhouse_backend.models.Float64Field(db_column='SkippedScan')),
                ('processtime', clickhouse_backend.models.Float64Field(db_column='ProcessTime')),
                ('skippedslowscan1', clickhouse_backend.models.Float64Field(db_column='SkippedSlowScan1')),
                ('maxproctime', clickhouse_backend.models.Float64Field(db_column='MaxProcTime')),
                ('slowproctime1', clickhouse_backend.models.Float64Field(db_column='SlowProcTime1')),
            ],
            options={
                'db_table': 'finseflux_StationStatus',
                'managed': False,
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('_overwrite_base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='FinseSommer',
            fields=[
                ('timestamp', clickhouse_backend.models.UInt32Field(db_column='TIMESTAMP', primary_key=True, serialize=False)),
                ('supply_voltage', clickhouse_backend.models.Float64Field(db_column='Supply voltage')),
                ('cube_dir_value', clickhouse_backend.models.Float64Field(db_column='Cube, Dir.value')),
                ('exception_code', clickhouse_backend.models.Float64Field(db_column='Exception code')),
                ('relay_b', clickhouse_backend.models.Float64Field(db_column='Relay B')),
                ('heating_current', clickhouse_backend.models.Float64Field(db_column='Heating current')),
                ('rod_temperature', clickhouse_backend.models.Float64Field(db_column='Rod, Temperature')),
                ('rod_ice', clickhouse_backend.models.Float64Field(db_column='Rod, Ice')),
                ('relais_a_counte', clickhouse_backend.models.Float64Field(db_column='Relais A, counte')),
                ('humidity', clickhouse_backend.models.Float64Field(db_column='Humidity')),
                ('cube_temperatur', clickhouse_backend.models.Float64Field(db_column='Cube, Temperatur')),
                ('temperature', clickhouse_backend.models.Float64Field(db_column='Temperature')),
                ('cube_ice', clickhouse_backend.models.Float64Field(db_column='Cube, Ice')),
                ('relay_function', clickhouse_backend.models.Float64Field(db_column='Relay function')),
                ('rod_water', clickhouse_backend.models.Float64Field(db_column='Rod, Water')),
                ('relais_b_counte', clickhouse_backend.models.Float64Field(db_column='Relais B, counte')),
                ('cube_ice_rate', clickhouse_backend.models.Float64Field(db_column='Cube, Ice rate')),
                ('cube_direction', clickhouse_backend.models.Float64Field(db_column='Cube, Direction')),
                ('relais_b_time', clickhouse_backend.models.Float64Field(db_column='Relais B, time')),
                ('cube_water', clickhouse_backend.models.Float64Field(db_column='Cube, Water')),
                ('relay_a', clickhouse_backend.models.Float64Field(db_column='Relay A')),
                ('dew_point', clickhouse_backend.models.Float64Field(db_column='Dew point')),
                ('relais_a_time', clickhouse_backend.models.Float64Field(db_column='Relais A, time')),
                ('rod_direction', clickhouse_backend.models.Float64Field(db_column='Rod, Direction')),
                ('rod_ice_rate', clickhouse_backend.models.Float64Field(db_column='Rod, Ice rate')),
                ('rod_dir_value', clickhouse_backend.models.Float64Field(db_column='Rod, Dir.value')),
                ('mrl_7_supply', clickhouse_backend.models.Float64Field(db_column='MRL-7 Supply')),
                ('modem_csq', clickhouse_backend.models.Float64Field(db_column='Modem CSQ')),
            ],
            options={
                'db_table': 'finse_sommer',
                'managed': False,
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('_overwrite_base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='GruvebadetData',
            fields=[
                ('timestamp', clickhouse_backend.models.UInt32Field(db_column='TIMESTAMP', primary_key=True, serialize=False)),
                ('atmos22_dir', clickhouse_backend.models.Float64Field(db_column='ATMOS22_DIR')),
                ('fc2driftmean_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2DRIFTmean_99_99_1_1_1')),
                ('atmos22_tc', clickhouse_backend.models.Float64Field(db_column='ATMOS22_TC')),
                ('skipped_scans', clickhouse_backend.models.Float64Field()),
                ('fc2wsmean_16_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2WSmean_16_99_1_1_1')),
                ('atmos22_east_ws', clickhouse_backend.models.Float64Field(db_column='ATMOS22_East_WS')),
                ('atmos22_gust', clickhouse_backend.models.Float64Field(db_column='ATMOS22_Gust')),
                ('fc1wsmin_16_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1WSmin_16_99_1_1_1')),
                ('ftpresult_diagnostic', clickhouse_backend.models.Float64Field(db_column='FTPResult_Diagnostic')),
                ('fc1driftsum_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1DRIFTsum_99_99_1_1_1')),
                ('batt_cr6', clickhouse_backend.models.Float64Field(db_column='batt_CR6')),
                ('atmos22_compassheading', clickhouse_backend.models.Float64Field(db_column='ATMOS22_compassHeading')),
                ('fc1wsmean_16_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1WSmean_16_99_1_1_1')),
                ('fc1driftmin_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1DRIFTmin_99_99_1_1_1')),
                ('fc1driftmax_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1DRIFTmax_99_99_1_1_1')),
                ('atmos22_north_ws', clickhouse_backend.models.Float64Field(db_column='ATMOS22_North_WS')),
                ('fc2driftsum_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2DRIFTsum_99_99_1_1_1')),
                ('crdresult_diagnostic', clickhouse_backend.models.Float64Field(db_column='CRDResult_Diagnostic')),
                ('atmos22_x_ori', clickhouse_backend.models.Float64Field(db_column='ATMOS22_X_Ori')),
                ('fc2driftstd_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2DRIFTstd_99_99_1_1_1')),
                ('fc1driftmean_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1DRIFTmean_99_99_1_1_1')),
                ('fc2wsmin_16_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2WSmin_16_99_1_1_1')),
                ('ftpresult_data', clickhouse_backend.models.Float64Field(db_column='FTPResult_Data')),
                ('fc2driftmin_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2DRIFTmin_99_99_1_1_1')),
                ('crdresult_data', clickhouse_backend.models.Float64Field(db_column='CRDResult_Data')),
                ('fc2driftmax_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2DRIFTmax_99_99_1_1_1')),
                ('atmos22_y_ori', clickhouse_backend.models.Float64Field(db_column='ATMOS22_Y_Ori')),
                ('record', clickhouse_backend.models.UInt32Field(db_column='RECORD')),
                ('process_time', clickhouse_backend.models.Float64Field()),
                ('buff_depth', clickhouse_backend.models.Float64Field()),
                ('panel_tmpr_cr6', clickhouse_backend.models.Float64Field(db_column='panel_tmpr_CR6')),
                ('fc1wsmax_16_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1WSmax_16_99_1_1_1')),
                ('fc2wsmax_16_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2WSmax_16_99_1_1_1')),
                ('atmos22_ws', clickhouse_backend.models.Float64Field(db_column='ATMOS22_WS')),
                ('fc1driftstd_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1DRIFTstd_99_99_1_1_1')),
            ],
            options={
                'db_table': 'gruvebadet_Data',
                'managed': False,
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('_overwrite_base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='GruvebadetDiagnostic',
            fields=[
                ('timestamp', clickhouse_backend.models.UInt32Field(db_column='TIMESTAMP', primary_key=True, serialize=False)),
                ('skippedsystemscan', clickhouse_backend.models.Float64Field(db_column='SkippedSystemScan')),
                ('paneltemp_max', clickhouse_backend.models.Float64Field(db_column='PanelTemp_Max')),
                ('battery_max', clickhouse_backend.models.Float64Field(db_column='Battery_Max')),
                ('starttime', clickhouse_backend.models.DateTime64Field(db_column='StartTime', precision=3)),
                ('pakbusaddress', clickhouse_backend.models.Float64Field(db_column='PakBusAddress')),
                ('progname', clickhouse_backend.models.StringField(db_column='ProgName')),
                ('record', clickhouse_backend.models.UInt32Field(db_column='RECORD')),
                ('paneltemp_min', clickhouse_backend.models.Float64Field(db_column='PanelTemp_Min')),
                ('low12vcount', clickhouse_backend.models.Float64Field(db_column='Low12VCount')),
                ('lithiumbattery', clickhouse_backend.models.Float64Field(db_column='LithiumBattery')),
                ('osversion', clickhouse_backend.models.StringField(db_column='OSVersion')),
                ('compileresults', clickhouse_backend.models.StringField(db_column='CompileResults')),
                ('progsignature', clickhouse_backend.models.Float64Field(db_column='ProgSignature')),
                ('varoutofbound', clickhouse_backend.models.Float64Field(db_column='VarOutOfBound')),
                ('skippedscan', clickhouse_backend.models.Float64Field(db_column='SkippedScan')),
                ('battery_min', clickhouse_backend.models.Float64Field(db_column='Battery_Min')),
                ('watchdogerrors', clickhouse_backend.models.Float64Field(db_column='WatchdogErrors')),
            ],
            options={
                'db_table': 'gruvebadet_Diagnostic',
                'managed': False,
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('_overwrite_base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Mammamia3Mm3Borehole',
            fields=[
                ('timestamp', clickhouse_backend.models.UInt32Field(db_column='TIMESTAMP', primary_key=True, serialize=False)),
                ('readezortd_ok', clickhouse_backend.models.Float64Field(db_column='ReadEzoRTD_OK')),
                ('bh_recnum', clickhouse_backend.models.Float64Field(db_column='BH_RecNum')),
                ('bh_plough_force', clickhouse_backend.models.Float64Field(db_column='BH_Plough_Force')),
                ('readkellerld_ok2', clickhouse_backend.models.Float64Field(db_column='ReadKellerLD_OK2')),
                ('atbottom', clickhouse_backend.models.Float64Field(db_column='AtBottom')),
                ('icm20948_tilt_z', clickhouse_backend.models.Float64Field(db_column='ICM20948_tilt_z')),
                ('icm20948_heading', clickhouse_backend.models.Float64Field(db_column='ICM20948_heading')),
                ('bh_chargeinput', clickhouse_backend.models.Float64Field(db_column='BH_ChargeInput')),
                ('icm20948_mag_z', clickhouse_backend.models.Float64Field(db_column='ICM20948_mag_z')),
                ('tsresult', clickhouse_backend.models.Float64Field(db_column='TSResult')),
                ('bh_ptemp', clickhouse_backend.models.Float64Field(db_column='BH_PTemp')),
                ('icm20948_heading_comp', clickhouse_backend.models.Float64Field(db_column='ICM20948_heading_comp')),
                ('bh_plough_d', clickhouse_backend.models.Float64Field(db_column='BH_Plough_D')),
                ('sht4x_temp', clickhouse_backend.models.Float64Field(db_column='SHT4X_Temp')),
                ('selectmux_ok', clickhouse_backend.models.Float64Field(db_column='SelectMux_OK')),
                ('icm20948_mag_x', clickhouse_backend.models.Float64Field(db_column='ICM20948_mag_x')),
                ('kellerx_tob1', clickhouse_backend.models.Float64Field(db_column='KellerX_TOB1')),
                ('triggerresult', clickhouse_backend.models.Float64Field(db_column='TriggerResult')),
                ('bh_plough_b', clickhouse_backend.models.Float64Field(db_column='BH_Plough_B')),
                ('kellerld_p1', clickhouse_backend.models.Float64Field(db_column='KellerLD_P1')),
                ('readicm20948_ok', clickhouse_backend.models.Float64Field(db_column='ReadICM20948_OK')),
                ('icm20948_tilt_y', clickhouse_backend.models.Float64Field(db_column='ICM20948_tilt_y')),
                ('surfacetimestamp', clickhouse_backend.models.DateTimeField(db_column='SurfaceTimeStamp')),
                ('readkellerld_ok1', clickhouse_backend.models.Float64Field(db_column='ReadKellerLD_OK1')),
                ('bh_battv', clickhouse_backend.models.Float64Field(db_column='BH_BattV')),
                ('kellerld_t2', clickhouse_backend.models.Float64Field(db_column='KellerLD_T2')),
                ('ezo_tmp', clickhouse_backend.models.Float64Field(db_column='Ezo_Tmp')),
                ('icm20948_acc_z', clickhouse_backend.models.Float64Field(db_column='ICM20948_acc_z')),
                ('sht4x_rh', clickhouse_backend.models.Float64Field(db_column='SHT4X_RH')),
                ('readkellerld_ok3', clickhouse_backend.models.Float64Field(db_column='ReadKellerLD_OK3')),
                ('bh_plough_a', clickhouse_backend.models.Float64Field(db_column='BH_Plough_A')),
                ('kellerld_p3', clickhouse_backend.models.Float64Field(db_column='KellerLD_P3')),
                ('record', clickhouse_backend.models.UInt32Field(db_column='RECORD')),
                ('kellerld_t1', clickhouse_backend.models.Float64Field(db_column='KellerLD_T1')),
                ('proxv', clickhouse_backend.models.Float64Field(db_column='ProxV')),
                ('bh_battv_lithium', clickhouse_backend.models.Float64Field(db_column='BH_BattV_Lithium')),
                ('kellerx_p1', clickhouse_backend.models.Float64Field(db_column='KellerX_P1')),
                ('ezo_ec', clickhouse_backend.models.Float64Field(db_column='Ezo_EC')),
                ('bh_plough_c', clickhouse_backend.models.Float64Field(db_column='BH_Plough_C')),
                ('readsht4x_ok', clickhouse_backend.models.Float64Field(db_column='ReadSHT4X_OK')),
                ('icm20948_acc_y', clickhouse_backend.models.Float64Field(db_column='ICM20948_acc_y')),
                ('icm20948_tilt_x', clickhouse_backend.models.Float64Field(db_column='ICM20948_tilt_x')),
                ('icm20948_acc_x', clickhouse_backend.models.Float64Field(db_column='ICM20948_acc_x')),
                ('readkellerx_ok', clickhouse_backend.models.Float64Field(db_column='ReadKellerX_OK')),
                ('bh_plough_angle', clickhouse_backend.models.Float64Field(db_column='BH_Plough_Angle')),
                ('kellerld_p2', clickhouse_backend.models.Float64Field(db_column='KellerLD_P2')),
                ('readezoec_ok', clickhouse_backend.models.Float64Field(db_column='ReadEzoEC_OK')),
                ('icm20948_temp', clickhouse_backend.models.Float64Field(db_column='ICM20948_Temp')),
                ('icm20948_mag_y', clickhouse_backend.models.Float64Field(db_column='ICM20948_mag_y')),
                ('kellerld_t3', clickhouse_backend.models.Float64Field(db_column='KellerLD_T3')),
            ],
            options={
                'db_table': 'mammamia3_mm3_Borehole',
                'managed': False,
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('_overwrite_base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Mammamia3Mm3Surface',
            fields=[
                ('timestamp', clickhouse_backend.models.UInt32Field(db_column='TIMESTAMP', primary_key=True, serialize=False)),
                ('plough_d', clickhouse_backend.models.Float64Field(db_column='Plough_D')),
                ('ftpfilename_mm3_surface', clickhouse_backend.models.StringField(db_column='FtpFileName_mm3_Surface')),
                ('tries', clickhouse_backend.models.Float64Field(db_column='Tries')),
                ('ptemp', clickhouse_backend.models.Float64Field(db_column='PTemp')),
                ('plough_b', clickhouse_backend.models.Float64Field(db_column='Plough_B')),
                ('boreholetimestamp', clickhouse_backend.models.DateTime64Field(db_column='BoreholeTimeStamp', precision=3)),
                ('sftimestamp', clickhouse_backend.models.DateTimeField(db_column='SfTimeStamp')),
                ('record', clickhouse_backend.models.UInt32Field(db_column='RECORD')),
                ('plough_v1', clickhouse_backend.models.Float64Field(db_column='Plough_V1')),
                ('forcebh_on', clickhouse_backend.models.Float64Field(db_column='ForceBH_On')),
                ('force_modem_on', clickhouse_backend.models.Float64Field(db_column='Force_Modem_On')),
                ('ftpresult_mm3_borehole', clickhouse_backend.models.Float64Field(db_column='FTPResult_mm3_Borehole')),
                ('ftpsend', clickhouse_backend.models.Float64Field(db_column='FtpSend')),
                ('bh_trigger', clickhouse_backend.models.Float64Field(db_column='BH_Trigger')),
                ('transmittimestamp', clickhouse_backend.models.DateTime64Field(db_column='TransmitTimeStamp', precision=3)),
                ('ftpresult_mm3_surface', clickhouse_backend.models.Float64Field(db_column='FTPResult_mm3_Surface')),
                ('battv', clickhouse_backend.models.Float64Field(db_column='BattV')),
                ('ftpfilename_mm3_borehole', clickhouse_backend.models.StringField(db_column='FtpFileName_mm3_Borehole')),
                ('getdataresult', clickhouse_backend.models.Float64Field(db_column='GetDataResult')),
                ('boreholerecord', clickhouse_backend.models.Float64Field(db_column='BoreholeRecord')),
                ('timeoffset', clickhouse_backend.models.Float64Field(db_column='TimeOffset')),
            ],
            options={
                'db_table': 'mammamia3_mm3_Surface',
                'managed': False,
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('_overwrite_base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Mobileflux2Biomet',
            fields=[
                ('timestamp', clickhouse_backend.models.UInt32Field(db_column='TIMESTAMP', primary_key=True, serialize=False)),
                ('fc2driftmin_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2DRIFTmin_99_99_1_1_1')),
                ('fc2wsmax_16_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2WSmax_16_99_1_1_1')),
                ('fc2driftstd_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2DRIFTstd_99_99_1_1_1')),
                ('precip_diff_d', clickhouse_backend.models.Float64Field(db_column='precip_diff_D')),
                ('dc4', clickhouse_backend.models.Float64Field()),
                ('precip_int_h_d', clickhouse_backend.models.Float64Field(db_column='precip_int_h_D')),
                ('dc8', clickhouse_backend.models.Float64Field()),
                ('precip_type_d', clickhouse_backend.models.Float64Field(db_column='precip_type_D')),
                ('fc1driftmax_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1DRIFTmax_99_99_1_1_1')),
                ('precip_abs_d', clickhouse_backend.models.Float64Field(db_column='precip_abs_D')),
                ('fc2wsmin_16_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2WSmin_16_99_1_1_1')),
                ('dc7', clickhouse_backend.models.Float64Field()),
                ('dc11', clickhouse_backend.models.Float64Field()),
                ('fc1wsmax_16_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1WSmax_16_99_1_1_1')),
                ('tot_precip_part', clickhouse_backend.models.Float64Field()),
                ('dc5', clickhouse_backend.models.Float64Field()),
                ('fc2wsmean_16_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2WSmean_16_99_1_1_1')),
                ('snow_part', clickhouse_backend.models.Float64Field()),
                ('dc6', clickhouse_backend.models.Float64Field()),
                ('fc1driftsum_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1DRIFTsum_99_99_1_1_1')),
                ('fc1wsmean_16_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1WSmean_16_99_1_1_1')),
                ('fc1wsmin_16_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1WSmin_16_99_1_1_1')),
                ('tot_drops', clickhouse_backend.models.Float64Field()),
                ('fc1driftmin_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1DRIFTmin_99_99_1_1_1')),
                ('fc2driftmean_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2DRIFTmean_99_99_1_1_1')),
                ('fc2driftsum_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2DRIFTsum_99_99_1_1_1')),
                ('dc10', clickhouse_backend.models.Float64Field()),
                ('hail_part', clickhouse_backend.models.Float64Field()),
                ('dc0', clickhouse_backend.models.Float64Field()),
                ('fc2driftmax_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC2DRIFTmax_99_99_1_1_1')),
                ('dc9', clickhouse_backend.models.Float64Field()),
                ('fc1driftmean_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1DRIFTmean_99_99_1_1_1')),
                ('dc1', clickhouse_backend.models.Float64Field()),
                ('fc1driftstd_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='FC1DRIFTstd_99_99_1_1_1')),
                ('dc2', clickhouse_backend.models.Float64Field()),
                ('dc3', clickhouse_backend.models.Float64Field()),
                ('drizzle_part', clickhouse_backend.models.Float64Field()),
                ('precip_int_min_d', clickhouse_backend.models.Float64Field(db_column='precip_int_min_D')),
                ('record', clickhouse_backend.models.UInt32Field(db_column='RECORD')),
                ('t_nr', clickhouse_backend.models.Float64Field(db_column='T_nr')),
                ('r_lw_out_meas', clickhouse_backend.models.Float64Field(db_column='R_LW_out_meas')),
                ('v_batt', clickhouse_backend.models.Float64Field(db_column='V_batt')),
                ('r_sw_in', clickhouse_backend.models.Float64Field(db_column='R_SW_in')),
                ('r_lw_in_meas', clickhouse_backend.models.Float64Field(db_column='R_LW_in_meas')),
                ('press_amb', clickhouse_backend.models.Float64Field()),
                ('t_amb', clickhouse_backend.models.Float64Field(db_column='T_amb')),
                ('rh_amb', clickhouse_backend.models.Float64Field(db_column='RH_amb')),
                ('r_sw_out', clickhouse_backend.models.Float64Field(db_column='R_SW_out')),
            ],
            options={
                'db_table': 'mobileflux2_Biomet',
                'managed': False,
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('_overwrite_base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='MobilefluxBiomet',
            fields=[
                ('timestamp', clickhouse_backend.models.UInt32Field(db_column='TIMESTAMP', primary_key=True, serialize=False)),
                ('ts_2_38_3_1_1', clickhouse_backend.models.Float64Field(db_column='TS_2_38_3_1_1')),
                ('sr50distance_9_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='SR50DISTANCE_9_99_1_1_1')),
                ('shf_99_37_1_1_2', clickhouse_backend.models.Float64Field(db_column='SHF_99_37_1_1_2')),
                ('record', clickhouse_backend.models.UInt32Field(db_column='RECORD')),
                ('ta_2_1_1_1_1', clickhouse_backend.models.Float64Field(db_column='TA_2_1_1_1_1')),
                ('lwout_6_15_1_1_1', clickhouse_backend.models.Float64Field(db_column='LWOUT_6_15_1_1_1')),
                ('surfacetemp_2_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='SURFACETEMP_2_99_1_1_1')),
                ('cs650vratio_99_99_3_1_1', clickhouse_backend.models.Float64Field(db_column='CS650VRATIO_99_99_3_1_1')),
                ('sr50quality_99_99_1_1_1', clickhouse_backend.models.Float64Field(db_column='SR50QUALITY_99_99_1_1_1')),
                ('p_rain_8_19_1_1_1', clickhouse_backend.models.Float64Field(db_column='P_RAIN_8_19_1_1_1')),
                ('lwin_6_14_1_1_1', clickhouse_backend.models.Float64Field(db_column='LWIN_6_14_1_1_1')),
                ('rh_19_3_1_1_1', clickhouse_backend.models.Float64Field(db_column='RH_19_3_1_1_1')),
                ('swin_6_10_1_1_1', clickhouse_backend.models.Float64Field(db_column='SWIN_6_10_1_1_1')),
                ('shf_6_37_2_1_1', clickhouse_backend.models.Float64Field(db_column='SHF_6_37_2_1_1')),
                ('shf_6_37_1_1_1', clickhouse_backend.models.Float64Field(db_column='SHF_6_37_1_1_1')),
                ('ts_2_38_2_1_1', clickhouse_backend.models.Float64Field(db_column='TS_2_38_2_1_1')),
                ('shf_99_37_2_1_2', clickhouse_backend.models.Float64Field(db_column='SHF_99_37_2_1_2')),
                ('bec_99_99_3_1_1', clickhouse_backend.models.Float64Field(db_column='BEC_99_99_3_1_1')),
                ('pa_4_2_1_1_1', clickhouse_backend.models.Float64Field(db_column='PA_4_2_1_1_1')),
                ('vin_18_39_1_1_1', clickhouse_backend.models.Float64Field(db_column='VIN_18_39_1_1_1')),
                ('swc_12_36_3_1_1', clickhouse_backend.models.Float64Field(db_column='SWC_12_36_3_1_1')),
                ('cs650period_99_99_3_1_1', clickhouse_backend.models.Float64Field(db_column='CS650PERIOD_99_99_3_1_1')),
                ('swout_6_11_1_1_1', clickhouse_backend.models.Float64Field(db_column='SWOUT_6_11_1_1_1')),
                ('permittivity_99_99_3_1_1', clickhouse_backend.models.Float64Field(db_column='PERMITTIVITY_99_99_3_1_1')),
                ('s_quality', clickhouse_backend.models.Float64Field(db_column='S_quality')),
                ('shf_6_36_1_1_1', clickhouse_backend.models.Float64Field(db_column='SHF_6_36_1_1_1')),
                ('pulse_cnr4_tot', clickhouse_backend.models.Float64Field(db_column='pulse_CNR4_Tot')),
                ('heatflux_2', clickhouse_backend.models.Float64Field(db_column='Heatflux_2')),
                ('cs650_vwc', clickhouse_backend.models.Float64Field(db_column='CS650_VWC')),
                ('shf_cal_2_field', clickhouse_backend.models.Float64Field(db_column='shf_cal(2)')),
                ('t_nr', clickhouse_backend.models.Float64Field(db_column='T_nr')),
                ('rl_up_meas', clickhouse_backend.models.Float64Field(db_column='Rl_up_meas')),
                ('tss', clickhouse_backend.models.Float64Field(db_column='TSS')),
                ('rh1_19_3_1_1_1', clickhouse_backend.models.Float64Field(db_column='RH1_19_3_1_1_1')),
                ('p_rain1_8_19_1_1_1', clickhouse_backend.models.Float64Field(db_column='P_RAIN1_8_19_1_1_1')),
                ('ta1_2_1_1_1', clickhouse_backend.models.Float64Field(db_column='TA1_2_1_1_1')),
                ('shf_6_36_2_1_1', clickhouse_backend.models.Float64Field(db_column='SHF_6_36_2_1_1')),
                ('rl_down_meas', clickhouse_backend.models.Float64Field(db_column='Rl_down_meas')),
                ('s', clickhouse_backend.models.Float64Field(db_column='S')),
                ('t_k_nr', clickhouse_backend.models.Float64Field(db_column='T_K_nr')),
                ('cs650_bec', clickhouse_backend.models.Float64Field(db_column='CS650_BEC')),
            ],
            options={
                'db_table': 'mobileflux_Biomet',
                'managed': False,
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('_overwrite_base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='MobilefluxStationstatus',
            fields=[
                ('timestamp', clickhouse_backend.models.UInt32Field(db_column='TIMESTAMP', primary_key=True, serialize=False)),
                ('pulse_cnr4_tot', clickhouse_backend.models.Float64Field(db_column='pulse_CNR4_Tot')),
                ('record', clickhouse_backend.models.UInt32Field(db_column='RECORD')),
                ('t_nr', clickhouse_backend.models.Float64Field(db_column='T_nr')),
                ('shf_cal_on_f', clickhouse_backend.models.Float64Field()),
                ('buff_depth', clickhouse_backend.models.Float64Field()),
                ('panel_tmpr', clickhouse_backend.models.Float64Field()),
                ('shf_cal_1_field', clickhouse_backend.models.Float64Field(db_column='shf_cal(1)')),
                ('rl_down_meas', clickhouse_backend.models.Float64Field(db_column='Rl_down_meas')),
                ('cxtla_tilt_y', clickhouse_backend.models.Float64Field(db_column='CXTLA_tilt_Y')),
                ('cxtla_tilt_x', clickhouse_backend.models.Float64Field(db_column='CXTLA_tilt_X')),
                ('sw12_1_state', clickhouse_backend.models.Float64Field()),
                ('ftpresult_biomet', clickhouse_backend.models.Float64Field(db_column='FTPResult_Biomet')),
                ('licoron', clickhouse_backend.models.Float64Field(db_column='LicorOn')),
                ('powlicor', clickhouse_backend.models.Float64Field(db_column='PowLicor')),
                ('t_k_nr', clickhouse_backend.models.Float64Field(db_column='T_K_nr')),
                ('shf_cal_2_field', clickhouse_backend.models.Float64Field(db_column='shf_cal(2)')),
                ('rl_up_meas', clickhouse_backend.models.Float64Field(db_column='Rl_up_meas')),
                ('batt_cr6', clickhouse_backend.models.Float64Field(db_column='batt_CR6')),
                ('process_time', clickhouse_backend.models.Float64Field()),
                ('ftpresult_stationstatus', clickhouse_backend.models.Float64Field(db_column='FTPResult_StationStatus')),
                ('a116_panel_tmpr', clickhouse_backend.models.Float64Field(db_column='A116_panel_tmpr')),
                ('batttc', clickhouse_backend.models.Float64Field(db_column='BattTC')),
                ('ftpresult_biomet_max', clickhouse_backend.models.Float64Field(db_column='FTPResult_Biomet_Max')),
                ('control_mode', clickhouse_backend.models.Float64Field()),
                ('process_time_max', clickhouse_backend.models.Float64Field(db_column='process_time_Max')),
                ('buff_depth_max', clickhouse_backend.models.Float64Field(db_column='buff_depth_Max')),
                ('ftpresult_stationstatus_max', clickhouse_backend.models.Float64Field(db_column='FTPResult_StationStatus_Max')),
                ('control_state', clickhouse_backend.models.Float64Field()),
                ('battv1_sens', clickhouse_backend.models.Float64Field(db_column='BattV1_sens')),
                ('d_filt', clickhouse_backend.models.Float64Field()),
                ('ah_tot_hi', clickhouse_backend.models.Float64Field(db_column='Ah_tot_hi')),
                ('alarm_lo', clickhouse_backend.models.Float64Field(db_column='Alarm_LO')),
                ('ah_tot_low', clickhouse_backend.models.Float64Field(db_column='Ah_tot_low')),
                ('ftpresult_biomet_min', clickhouse_backend.models.Float64Field(db_column='FTPResult_Biomet_Min')),
                ('ah_hi', clickhouse_backend.models.Float64Field(db_column='Ah_hi')),
                ('ah_low', clickhouse_backend.models.Float64Field(db_column='Ah_low')),
                ('alarm_hi', clickhouse_backend.models.Float64Field(db_column='Alarm_HI')),
                ('buff_depth_avg', clickhouse_backend.models.Float64Field(db_column='buff_depth_Avg')),
                ('batt_volt', clickhouse_backend.models.Float64Field()),
                ('regulatorres', clickhouse_backend.models.Float64Field(db_column='RegulatorRes')),
                ('battv2', clickhouse_backend.models.Float64Field(db_column='BattV2')),
                ('hour_low', clickhouse_backend.models.Float64Field(db_column='Hour_low')),
                ('dip_switch', clickhouse_backend.models.Float64Field()),
                ('batt_i2', clickhouse_backend.models.Float64Field(db_column='Batt_I2')),
                ('fault', clickhouse_backend.models.Float64Field()),
                ('v_ref', clickhouse_backend.models.Float64Field(db_column='V_Ref')),
                ('hour_hi', clickhouse_backend.models.Float64Field(db_column='Hour_hi')),
                ('battv1_slow', clickhouse_backend.models.Float64Field(db_column='BattV1_slow')),
                ('batt_i1', clickhouse_backend.models.Float64Field(db_column='Batt_I1')),
                ('ftpresult_stationstatus_min', clickhouse_backend.models.Float64Field(db_column='FTPResult_StationStatus_Min')),
                ('battv1', clickhouse_backend.models.Float64Field(db_column='BattV1')),
                ('process_time_avg', clickhouse_backend.models.Float64Field(db_column='process_time_Avg')),
                ('regulatortc', clickhouse_backend.models.Float64Field(db_column='RegulatorTC')),
            ],
            options={
                'db_table': 'mobileflux_StationStatus',
                'managed': False,
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('_overwrite_base_manager', django.db.models.manager.Manager()),
            ],
        ),
    ]
