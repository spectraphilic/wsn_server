# Generated by Django 4.2.10 on 2025-09-04 14:59

import clickhouse_backend.models
from django.db import migrations
import django.db.models.manager


class Migration(migrations.Migration):

    dependencies = [
        ('ch', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FinsefluxPostproc',
            fields=[
                ('time', clickhouse_backend.models.DateTimeField(primary_key=True, serialize=False)),
                ('u_mean', clickhouse_backend.models.Float64Field(verbose_name='streamwise velocity [m/s]')),
                ('v_mean', clickhouse_backend.models.Float64Field(verbose_name='crosswise velocity [m/s]')),
                ('w_mean', clickhouse_backend.models.Float64Field(verbose_name='vertical velocity [m/s]')),
                ('Ts_mean', clickhouse_backend.models.Float64Field(verbose_name='sonic temperature [K]')),
                ('T_mean', clickhouse_backend.models.Float64Field(verbose_name='temperature (corrected) [K]')),
                ('h2o_mean', clickhouse_backend.models.Float64Field(verbose_name='H2O density [kg/m^3]')),
                ('co2_mean', clickhouse_backend.models.Float64Field(verbose_name='CO2 density [kg/m^3]')),
                ('u_sd', clickhouse_backend.models.Float64Field(verbose_name='streamwise velocity fluctuation [m/s]')),
                ('v_sd', clickhouse_backend.models.Float64Field(verbose_name='crosswise velocity fluctuation [m/s]')),
                ('w_sd', clickhouse_backend.models.Float64Field(verbose_name='vertical velocity fluctuation [m/s]')),
                ('Ts_sd', clickhouse_backend.models.Float64Field(verbose_name='temperature fluctuation [K]')),
                ('h2o_sd', clickhouse_backend.models.Float64Field(verbose_name='H2O density fluctuation [kg/m^3]')),
                ('co2_sd', clickhouse_backend.models.Float64Field(verbose_name='CO2 density fluctuation [kg/m^3]')),
                ('cov_uw', clickhouse_backend.models.Float64Field(verbose_name='covariance(u,w) [m^2/s^2]')),
                ('cov_vw', clickhouse_backend.models.Float64Field(verbose_name='covariance(v,w) [m^2/s^2]')),
                ('cov_uv', clickhouse_backend.models.Float64Field(verbose_name='covariance(u,v) [m^2/s^2]')),
                ('wd_mean', clickhouse_backend.models.Float64Field(verbose_name='mean wind direction [degree]')),
                ('ws_mean', clickhouse_backend.models.Float64Field(verbose_name='mean wind speed [m/s]')),
                ('ustar', clickhouse_backend.models.Float64Field(verbose_name='friction velocity [m/s]')),
                ('tke', clickhouse_backend.models.Float64Field(verbose_name='turbulent kinetic energy [m^2/s^2]')),
                ('dshear', clickhouse_backend.models.Float64Field(verbose_name='directional shear [degree]')),
                ('z0', clickhouse_backend.models.Float64Field(verbose_name='roughness length (calculated from ustar) [m]')),
                ('SH', clickhouse_backend.models.Float64Field(verbose_name='sensible heat flux [W/m^2]')),
                ('LH', clickhouse_backend.models.Float64Field(verbose_name='latent heat flux [W/m^2]')),
                ('ET', clickhouse_backend.models.Float64Field(verbose_name='evaporation [kg/(s*m^2])')),
                ('BR', clickhouse_backend.models.Float64Field(verbose_name='Bowen ratio')),
                ('CF', clickhouse_backend.models.Float64Field(verbose_name='CO2 flux [kg/(s*m^2])')),
                ('L', clickhouse_backend.models.Float64Field(verbose_name='Obukhov length [m]')),
                ('zeta', clickhouse_backend.models.Float64Field(verbose_name='stability parameter')),
                ('xb', clickhouse_backend.models.Float64Field(verbose_name='xb (anisotropy triangle)')),
                ('yb', clickhouse_backend.models.Float64Field(verbose_name='yb (anisotropy triangle)')),
                ('flux_intermittency', clickhouse_backend.models.Float64Field(verbose_name='flux intermittency factor')),
                ('dr_rot1', clickhouse_backend.models.Int32Field(verbose_name='angle of 1. rotation in DR (for qc) [degree]')),
                ('dr_rot2', clickhouse_backend.models.Int32Field(verbose_name='angle of 2. rotation in DR (for qc) [degree]')),
                ('nr_spikes_u', clickhouse_backend.models.Int32Field(verbose_name='number of spikes u')),
                ('nr_spikes_v', clickhouse_backend.models.Int32Field(verbose_name='number of spikes v')),
                ('nr_spikes_w', clickhouse_backend.models.Int32Field(verbose_name='number of spikes w')),
                ('nr_spikes_Ts', clickhouse_backend.models.Int32Field(verbose_name='number of spikes Ts')),
                ('nr_spikes_h2o', clickhouse_backend.models.Int32Field(verbose_name='number of spikes H2O')),
                ('nr_spikes_co2', clickhouse_backend.models.Int32Field(verbose_name='number of spikes CO2')),
                ('ampl_res_u', clickhouse_backend.models.Int32Field(verbose_name='amplitude resolution u')),
                ('ampl_res_v', clickhouse_backend.models.Int32Field(verbose_name='amplitude resolution v')),
                ('ampl_res_w', clickhouse_backend.models.Int32Field(verbose_name='amplitude resolution w')),
                ('ampl_res_Ts', clickhouse_backend.models.Int32Field(verbose_name='amplitude resolution Ts')),
                ('ampl_res_h2o', clickhouse_backend.models.Int32Field(verbose_name='amplitude resolution H2O')),
                ('ampl_res_co2', clickhouse_backend.models.Int32Field(verbose_name='amplitude resolution CO2')),
                ('qf_most', clickhouse_backend.models.Int32Field(verbose_name='quality flag MOST')),
                ('qf_stationarity', clickhouse_backend.models.Int32Field(verbose_name='quality flag stationarity')),
                ('qf_w', clickhouse_backend.models.Int32Field(verbose_name='quality flag w')),
                ('qf_all', clickhouse_backend.models.Int32Field(verbose_name='quality flag (all)')),
            ],
            options={
                'abstract': False,
                'base_manager_name': '_overwrite_base_manager',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('_overwrite_base_manager', django.db.models.manager.Manager()),
            ],
        ),
    ]
